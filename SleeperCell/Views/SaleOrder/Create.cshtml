@using System.Collections
@model SleeperCell.Models.SaleOrderViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>SaleOrderViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SubTotal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SubTotal, new { htmlAttributes = new { @class = "form-control", @id = "SubTotal", @onkeyup = "calculateSubTotal()" ,@readonly="true"} })
       
                @Html.ValidationMessageFor(model => model.SubTotal, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CashReceived, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CashReceived, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CashReceived, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CashReturn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CashReturn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CashReturn, "", new { @class = "text-danger" })
            </div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Unit Price</th>
                    <th>Quantity</th>
                    <th>Line Total</th>
                </tr>
            </thead>
            <tbody id="TableBody">
                <tr id="0">
                    <td>
                        @Html.DropDownList("Detail[0].ProductId", (IEnumerable<SelectListItem>)ViewBag.ProductSelectList, "Select Product", new { @class = "form-control" })
                        @*@Html.DropDownListFor(model => model.Detail.FirstOrDefault().ProductId, (IEnumerable<SelectListItem>)ViewBag.ProductSelectList, "Select Product", new { @class = "form-control " })*@
                        @Html.ValidationMessageFor(model => model.Detail.FirstOrDefault().ProductId, "", new { @class = "text - " })
                    </td>
                    <td>
                        <input type="text" name="Detail[0].UnitPrice" class="form-control" onkeyup="OnkeyUp1(0)" property="unitprice" readonly />
                        @*@Html.EditorFor(model => model.Detail.FirstOrDefault().UnitPrice, new {htmlAttributes = new {@class = "form-control"}})*@
                        @Html.ValidationMessageFor(model => model.Detail.FirstOrDefault().UnitPrice, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        <input type="text" name="Detail[0].QtyOrdered" class="form-control" onkeyup="OnkeyUp1(0)" property="qty" />
                        @*@Html.EditorFor(model => model.Detail.FirstOrDefault().QtyOrdered, new { htmlAttributs = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Detail.FirstOrDefault().QtyOrdered, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        <input type="text" id="line" class="form-control" onkeyup="OnkeyUp1(0)" property="LineTotal" />
                    </td>
                </tr>
            </tbody>
        </table>

        <button class="btn btn-success" type="button" onclick="neww()"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> </button>
        <button class="alert-danger" type="button" onclick="neww()"></button>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

    <template id="MyTableRow">
        <tr id="{{index}}">
            <td>
                @Html.DropDownList("Detail[{{index}}].ProductId", (IEnumerable<SelectListItem>)ViewBag.ProductSelectList, "Select Product", new { @class = "form-control"})
                @*@Html.DropDownListFor(model => model.Detail.FirstOrDefault().ProductId, (IEnumerable<SelectListItem>)ViewBag.ProductSelectList, "Select Product", new { @class = "form-control " })*@
                @Html.ValidationMessageFor(model => model.Detail.FirstOrDefault().ProductId, "", new { @class = "text - " })
            </td>
            <td>               
                <input type="text" name="Detail[{{index}}].UnitPrice" class="form-control" onkeyup="OnkeyUp1({{index}})" property="unitprice" readonly/>
                @*@Html.EditorFor(model => model.Detail.FirstOrDefault().UnitPrice, new {htmlAttributes = new {@class = "form-control"}})*@
                @Html.ValidationMessageFor(model => model.Detail.FirstOrDefault().UnitPrice, "", new {@class = "text-danger"})
            </td>
            <td>
                <input type="text" name="Detail[{{index}}].QtyOrdered" class="form-control" onkeyup="OnkeyUp1({{index}})" property="qty"/>
                @*@Html.EditorFor(model => model.Detail.FirstOrDefault().QtyOrdered, new { htmlAttributs = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Detail.FirstOrDefault().QtyOrdered, "", new { @class = "text-danger" })
            </td>
            <td >
               <input type="text" id="line" class="form-control" onkeyup="OnkeyUp1({{index}})" property="LineTotal"/>
            </td>
        </tr>
    </template>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var index = 1;
        function neww() {
            var tbody = $("#TableBody");
            
            var template = $("#MyTableRow").html();

            template = template.replace(/{{index}}/g, index);
            index++;

            tbody.append(template);
            //t.innerHTML = t.innerHTML + row.innerHTML;     
        }
        function OnkeyUp1(getindex) {

            var UnitPrice = $("#" + getindex + "  td:nth-child(2)").find("[property=unitprice]").val();
            var Quantity = $("#" + getindex + "  td:nth-child(3)").find("[property=qty]").val();
            $("#" + getindex + "  td:nth-child(4)").find("[property=LineTotal]").val(UnitPrice * Quantity);

            calculateSubTotal();
        }
        function calculateSubTotal() {
            var total = 0;
            $('#TableBody tr').each(function (index, item) {
                total += $(item).find('[property=qty]').val() * $(item).find('[property=unitprice]').val();
                
            });
            $('#SubTotal').val(total);
        }
    </script>
}
